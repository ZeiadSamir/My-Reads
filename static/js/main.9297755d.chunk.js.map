{"version":3,"sources":["BooksAPI.js","Search.js","BooksTemplate.js","mainPage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","Search","query","searchBooks","handleQuery","handleShelfUpdate","className","to","type","placeholder","value","onChange","e","target","console","log","map","book","style","width","height","backgroundImage","imageLinks","smallThumbnail","backgroundSize","name","id","defaultValue","shelf","disabled","title","authors","BooksTemplate","filterName","shelfTitle","href","infoLink","rel","MainPage","books","filterdCurrentlyReading","filter","filterdWantToRead","filterdRead","App","useState","setBooks","Map","mapOfBooks","setMapOfBooks","setSearchBooks","setQuery","mergeData","setMergeData","useEffect","a","fetch","then","res","json","data","createMappingOfBooks","getBooks","merging","has","get","newMap","forEach","set","newShelf","newbooks","b","method","body","JSON","stringify","BooksAPI","maxResults","searchedFor","error","alert","basename","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9297755d.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\nlet token = localStorage.token;\n\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query, maxResults }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","import { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst Search = ({query, searchBooks, handleQuery, handleShelfUpdate})=> {\r\n\r\n\r\n\r\n    return(\r\n      <div className=\"search-books\">\r\n      <div className=\"search-books-bar\">\r\n        <Link to=\"/\" className=\"close-search\">Close</Link>\r\n        <div className=\"search-books-input-wrapper\">\r\n\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search by title, author, or ISBN\"\r\n            value={query}\r\n            onChange={(e)=> handleQuery(e.target.value)}\r\n          />\r\n        </div>\r\n        {console.log(query)}\r\n      </div>\r\n      <div className=\"search-books-results\">\r\n        <ol className=\"books-grid\">\r\n\r\n          {searchBooks.map((book)=> (\r\n            <li key={book.id}>\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                <div\r\n                    className=\"book-cover\"\r\n                    style={{\r\n                    width: 128,\r\n                    height: 193,\r\n                    backgroundImage: `url(${book.imageLinks ? book.imageLinks.smallThumbnail : \"https://drupal.nypl.org/sites-drupal/default/files/blogs/J5LVHEL.jpg\"} )`,\r\n                    backgroundSize: 128,\r\n\r\n                    }}\r\n                ></div>\r\n                <div className=\"book-shelf-changer\">\r\n                    <select\r\n                    name={book.id}\r\n                    defaultValue={book.shelf ? book.shelf : 'none'}\r\n                    onChange={(e) => handleShelfUpdate(book, e.target.value)}\r\n                    >\r\n                    <option value=\"Move to...\" disabled>\r\n                        Move to...\r\n                    </option>\r\n                    <option value=\"currentlyReading\">\r\n                        Currently Reading\r\n                    </option>\r\n                    <option value=\"wantToRead\">Want to Read</option>\r\n                    <option value=\"read\">Read</option>\r\n                    <option value=\"none\">None</option>\r\n                    </select>\r\n                </div>\r\n                </div>\r\n                <div className=\"book-title\">{book.title}</div>\r\n                <div className=\"book-authors\">{book.authors}</div>\r\n                <div>{book.shelf}</div>\r\n            </div>\r\n            </li>\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Search;","import PropTypes from 'prop-types';\r\nconst BooksTemplate = ({ handleShelfUpdate, filterName, shelfTitle})=> {\r\n    return(\r\n        <div className=\"bookshelf\">\r\n            <h2 className=\"bookshelf-title\">{shelfTitle}</h2>\r\n            <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                {filterName.map((book) => (\r\n                    <li key={book.id}>\r\n                    <div className=\"book\">\r\n                        <div className=\"book-top\">\r\n                        <div\r\n                            className=\"book-cover\"\r\n                            style={{\r\n                            width: 128,\r\n                            height: 193,\r\n                            backgroundImage: `url(${book.imageLinks ? book.imageLinks.smallThumbnail : \"https://drupal.nypl.org/sites-drupal/default/files/blogs/J5LVHEL.jpg\"} )`,\r\n                            backgroundSize: 128,\r\n                            }}\r\n\r\n                        ></div>\r\n                        <div className=\"book-shelf-changer\">\r\n                            <select\r\n                            name={book.id}\r\n                            onChange={(e) => handleShelfUpdate(book, e.target.value)}\r\n                            defaultValue={book.shelf}\r\n                            >\r\n                            <option value=\"Move to...\" disabled>\r\n                                Move to...\r\n                            </option>\r\n                            <option value=\"currentlyReading\">\r\n                                Currently Reading\r\n                            </option>\r\n                            <option value=\"wantToRead\">Want to Read</option>\r\n                            <option value=\"read\">Read</option>\r\n                            <option value=\"none\">None</option>\r\n                            </select>\r\n\r\n\r\n                        </div>\r\n                        </div>\r\n                        <div className=\"book-title\">{book.title}</div>\r\n                        <div className=\"book-authors\">{book.authors}</div>\r\n                        \r\n                        <div className='book-page'><a href={book.infoLink} target=\"_blank\" rel=\"noopener noreferrer\">Visit Book</a></div>\r\n\r\n                    </div>\r\n                    </li>\r\n                ))}\r\n                {console.log(filterName)}\r\n                </ol>\r\n            </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nBooksTemplate.propTypes = {\r\n    handleShelfUpdate: PropTypes.func,\r\n    filterName: PropTypes.array,\r\n    shelfTitle: PropTypes.string,\r\n}\r\nexport default BooksTemplate;","\r\nimport BooksTemplate from \"./BooksTemplate\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MainPage = ({books ,handleShelfUpdate})=> {\r\n  const filterdCurrentlyReading = books.filter((book) => {\r\n    return book.shelf === \"currentlyReading\";\r\n});\r\nconst filterdWantToRead = books.filter((book) => {\r\n    return book.shelf === \"wantToRead\";\r\n});\r\nconst filterdRead = books.filter((book) => {\r\n    return book.shelf === \"read\";\r\n});\r\n    return (\r\n        <div className=\"app\">\r\n        <div className=\"list-books\">\r\n          <div className=\"list-books-title\">\r\n            <h1>My Reads</h1>\r\n          </div>\r\n          <div className=\"list-books-content\">\r\n            <div>\r\n            <BooksTemplate filterName={filterdCurrentlyReading} shelfTitle= {\"Currently Reading\"} books={books} handleShelfUpdate={handleShelfUpdate} />\r\n            <BooksTemplate filterName={filterdWantToRead} shelfTitle= {\"Want To Read\"} books={books} handleShelfUpdate={handleShelfUpdate} />\r\n            <BooksTemplate filterName={filterdRead} shelfTitle= {\"Read\"} books={books} handleShelfUpdate={handleShelfUpdate} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Link to=\"/search\" className=\"open-search\">\r\n        open-search\r\n        </Link>\r\n        <div className=\"dev-name\">Development: <a href=\"https://www.linkedin.com/in/zeiad-samir-304778215/\" target=\"_blank\" rel=\"noopener noreferrer\">Zeiad Samir</a></div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { HashRouter, Route, Routes } from 'react-router-dom';\nimport * as BooksAPI from './BooksAPI';\nimport Search from \"./Search\";\nimport MainPage from \"./mainPage\";\n\nfunction App() {\n\n  const [books, setBooks] = useState([]);\n  const [mapOfBooks, setMapOfBooks] = useState(new Map());\n  const [searchBooks, setSearchBooks] =useState([]);\n  const [query,  setQuery] = useState(\"\");\n  const [mergeData, setMergeData] = useState([]);\n\n  // get all books from API\n\n  useEffect(()=> {\n    const getBooks = async()=> {\n      const res = await BooksAPI.getAll();\n      setBooks(res);\n      setMapOfBooks(createMappingOfBooks(res));\n    };\n    getBooks();\n  },[])\n\n  // Merge Properties of search books and main page array\n\n  useEffect(()=> {\n\n    const merging = searchBooks.map(book => {\n      if(mapOfBooks.has(book.id)){\n        return mapOfBooks.get(book.id);\n      }else{\n        return book;\n      };\n    });\n\n    setMergeData(merging);\n    },[mapOfBooks, searchBooks]);\n\n    const createMappingOfBooks = (books)=> {\n      const newMap =  new Map();\n      books.forEach(book => newMap.set(book.id, book));\n      return newMap;\n    }\n\n\n// Shelf update function\n\n  const handleShelfUpdate = (book, newShelf)=> {\n    const newbooks = books.map((b)=> {\n      if(b.id === book.id) {\n        book.shelf = newShelf;\n        console.log(`Book Id Is ${book.id}, New Shelf for this book is ${newShelf}`);\n        return book;\n      };\n      return b;\n    });\n    BooksAPI.update(book, newShelf);\n    setBooks(newbooks);\n  };\n\n  // Book Search Functions\n\n  useEffect(()=> {\n    if(query){\n      setQuery(query)\n      BooksAPI.search(query,10).then( searchedFor =>  {\n      if(searchedFor.error){\n        setSearchBooks([]);\n        console.log('we found error while getting books')\n        alert('Book Not Found!')\n      }else{\n        setSearchBooks(searchedFor);\n\n      }\n    });\n    }else{\n      setSearchBooks([]);\n      setQuery(\"\");\n    }\n\n  },[query])\n\n\n  return (\n    <HashRouter basename=\"/\">\n    <Routes>\n      <Route\n      path=\"/\"\n      element={\n        <MainPage books={books} handleShelfUpdate={handleShelfUpdate}/>\n      }/>\n\n      <Route\n      path=\"/search\"\n      element={\n        <Search books={books} handleShelfUpdate={handleShelfUpdate} handleQuery={setQuery} query={query} searchBooks={mergeData}/>\n      } />\n    </Routes>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n ,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}